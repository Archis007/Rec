//Array Sum: a) Implement a recursive function named "arraySum" that calculates the sum of elements in an integer array. b) Create an integer array with a few elements, and then call the "arraySum" function to calculate and display the sum.

#include <stdio.h>

int arraySum(int arr[], int size) {
    if (size == 0) {
        return 0;
    } else {
        return arr[size - 1] + arraySum(arr, size - 1);
    }
}

int main() {
    int arr[] = {2, 4, 6, 8, 10};
    int size = sizeof(arr) / sizeof(arr[0]);

    int sum = arraySum(arr, size);

    printf("Sum of elements in the array: %d\n", sum);

    return 0;
}

2.
//String Reversal: a) Implement a recursive function named "reverseString" that reverses a given string. b) Prompt the user to input a string, and then call the "reverseString" function to display the reversed string.

  #include <stdio.h>
#include <string.h>

void reverseString(char *str, int start, int end) {
    if (start >= end)
        return;
    
    // Swap characters at start and end indices
    char temp = str[start];
    str[start] = str[end];
    str[end] = temp;
    
    // Recursively reverse the remaining substring
    reverseString(str, start + 1, end - 1);
}

int main() {
    char input[100];
    
    printf("Enter a string: ");
    scanf("%s", input);
    
    int length = strlen(input);
    
    reverseString(input, 0, length - 1);
    
    printf("Reversed string: %s\n", input);
    
    return 0;
}
3.
//Palindrome Check: Write a recursive function to determine if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).
  #include <stdio.h>
#include <string.h>
#include <ctype.h>

int isPalindrome(char *str, int start, int end) {
    // Base case: if the start index surpasses or equals the end index
    if (start >= end)
        return 1;  // Palindrome
    
    // Convert characters to lowercase before comparison
    char c1 = tolower(str[start]);
    char c2 = tolower(str[end]);
    
    if (c1 != c2)
        return 0;  // Not a palindrome
    
    // Recursively check the remaining substring
    return isPalindrome(str, start + 1, end - 1);
}

int main() {
    char input[100];
    
    printf("Enter a string: ");
    scanf("%s", input);
    
    int length = strlen(input);
    
    if (isPalindrome(input, 0, length - 1))
        printf("The given string is a palindrome.\n");
    else
        printf("The given string is not a palindrome.\n");
    
    return 0;
}
4.
//Power Function: Create a recursive function to calculate the value of base raised to the power of exponent, where both base and exponent are positive integers. Make sure it handles all the boundary cases.
#include <stdio.h>

unsigned long long int power(int base, int exponent) {
    // Base case: anything raised to the power of 0 is 1
    if (exponent == 0)
        return 1;
    
    // Recursive case
    return base * power(base, exponent - 1);
}

int main() {
    int base, exponent;
    
    printf("Enter the base: ");
    scanf("%d", &base);
    
    printf("Enter the exponent: ");
    scanf("%d", &exponent);
    
    if (base < 0 || exponent < 0) {
        printf("Both base and exponent must be positive integers.\n");
    } else {
        unsigned long long int result = power(base, exponent);
        printf("%d^%d = %llu\n", base, exponent, result);
    }
    
    return 0;
}
5.
//Tower of Hanoi: Solve the classic Tower of Hanoi problem using recursion. Given three pegs and a stack of n disks of different sizes, move the entire stack from one peg to another with the following rules: Only one disk can be moved at a time, and a larger disk cannot be placed on top of a smaller disk.
#include <stdio.h>

void towerOfHanoi(int n, char source, char auxiliary, char destination) {
    if (n == 1) {
        printf("Move disk 1 from %c to %c\n", source, destination);
        return;
    }
    
    towerOfHanoi(n - 1, source, destination, auxiliary);
    printf("Move disk %d from %c to %c\n", n, source, destination);
    towerOfHanoi(n - 1, auxiliary, source, destination);
}

int main() {
    int n;
    
    printf("Enter the number of disks: ");
    scanf("%d", &n);
    
    if (n <= 0) {
        printf("Number of disks must be a positive integer.\n");
    } else {
        towerOfHanoi(n, 'A', 'B', 'C');
    }
    
    return 0;
}
6.
//Permutations: Implement a recursive function to generate all possible permutations of a given string. A permutation of a string is an arrangement of its characters in a different order.
#include <stdio.h>
#include <string.h>

void swap(char *a, char *b) {
    char temp = *a;
    *a = *b;
    *b = temp;
}

void generatePermutations(char *str, int start, int end) {
    if (start == end) {
        printf("%s\n", str);
        return;
    }
    
    for (int i = start; i <= end; i++) {
        swap(&str[start], &str[i]);
        generatePermutations(str, start + 1, end);
        swap(&str[start], &str[i]); // Backtrack
    }
}

int main() {
    char input[100];
    
    printf("Enter a string: ");
    scanf("%s", input);
    
    int length = strlen(input);
    
    generatePermutations(input, 0, length - 1);
    
    return 0;
}
